/*
 * This file is generated by jOOQ.
 */
package com.fenrir.core.database.tables;


import com.fenrir.core.database.Public;
import com.fenrir.core.database.tables.records.AlbumsRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Albums extends TableImpl<AlbumsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.albums</code>
     */
    public static final Albums ALBUMS = new Albums();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumsRecord> getRecordType() {
        return AlbumsRecord.class;
    }

    /**
     * The column <code>public.albums.id</code>.
     */
    public final TableField<AlbumsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.albums.name</code>.
     */
    public final TableField<AlbumsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.albums.description</code>.
     */
    public final TableField<AlbumsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.albums.updated_at</code>.
     */
    public final TableField<AlbumsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.albums.created_at</code>.
     */
    public final TableField<AlbumsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.albums.owner_id</code>.
     */
    public final TableField<AlbumsRecord, Long> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.albums.visibility_id</code>.
     */
    public final TableField<AlbumsRecord, Long> VISIBILITY_ID = createField(DSL.name("visibility_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Albums(Name alias, Table<AlbumsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Albums(Name alias, Table<AlbumsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.albums</code> table reference
     */
    public Albums(String alias) {
        this(DSL.name(alias), ALBUMS);
    }

    /**
     * Create an aliased <code>public.albums</code> table reference
     */
    public Albums(Name alias) {
        this(alias, ALBUMS);
    }

    /**
     * Create a <code>public.albums</code> table reference
     */
    public Albums() {
        this(DSL.name("albums"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AlbumsRecord, Long> getIdentity() {
        return (Identity<AlbumsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AlbumsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Albums.ALBUMS, DSL.name("pk_albums"), new TableField[] { Albums.ALBUMS.ID }, true);
    }

    @Override
    public Albums as(String alias) {
        return new Albums(DSL.name(alias), this);
    }

    @Override
    public Albums as(Name alias) {
        return new Albums(alias, this);
    }

    @Override
    public Albums as(Table<?> alias) {
        return new Albums(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Albums rename(String name) {
        return new Albums(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Albums rename(Name name) {
        return new Albums(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Albums rename(Table<?> name) {
        return new Albums(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
