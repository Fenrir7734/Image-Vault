/*
 * This file is generated by jOOQ.
 */
package com.fenrir.core.database.tables.records;


import com.fenrir.core.database.tables.Albums;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumsRecord extends UpdatableRecordImpl<AlbumsRecord> implements Record7<Long, String, String, LocalDateTime, LocalDateTime, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.albums.id</code>.
     */
    public AlbumsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.albums.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.albums.name</code>.
     */
    public AlbumsRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.albums.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.albums.description</code>.
     */
    public AlbumsRecord setDescription(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.albums.description</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.albums.updated_at</code>.
     */
    public AlbumsRecord setUpdatedAt(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.albums.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>public.albums.created_at</code>.
     */
    public AlbumsRecord setCreatedAt(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.albums.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.albums.owner_id</code>.
     */
    public AlbumsRecord setOwnerId(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.albums.owner_id</code>.
     */
    public Long getOwnerId() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.albums.visibility_id</code>.
     */
    public AlbumsRecord setVisibilityId(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.albums.visibility_id</code>.
     */
    public Long getVisibilityId() {
        return (Long) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, String, String, LocalDateTime, LocalDateTime, Long, Long> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Albums.ALBUMS.ID;
    }

    @Override
    public Field<String> field2() {
        return Albums.ALBUMS.NAME;
    }

    @Override
    public Field<String> field3() {
        return Albums.ALBUMS.DESCRIPTION;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Albums.ALBUMS.UPDATED_AT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Albums.ALBUMS.CREATED_AT;
    }

    @Override
    public Field<Long> field6() {
        return Albums.ALBUMS.OWNER_ID;
    }

    @Override
    public Field<Long> field7() {
        return Albums.ALBUMS.VISIBILITY_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public LocalDateTime component4() {
        return getUpdatedAt();
    }

    @Override
    public LocalDateTime component5() {
        return getCreatedAt();
    }

    @Override
    public Long component6() {
        return getOwnerId();
    }

    @Override
    public Long component7() {
        return getVisibilityId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public LocalDateTime value4() {
        return getUpdatedAt();
    }

    @Override
    public LocalDateTime value5() {
        return getCreatedAt();
    }

    @Override
    public Long value6() {
        return getOwnerId();
    }

    @Override
    public Long value7() {
        return getVisibilityId();
    }

    @Override
    public AlbumsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AlbumsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public AlbumsRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public AlbumsRecord value4(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public AlbumsRecord value5(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public AlbumsRecord value6(Long value) {
        setOwnerId(value);
        return this;
    }

    @Override
    public AlbumsRecord value7(Long value) {
        setVisibilityId(value);
        return this;
    }

    @Override
    public AlbumsRecord values(Long value1, String value2, String value3, LocalDateTime value4, LocalDateTime value5, Long value6, Long value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AlbumsRecord
     */
    public AlbumsRecord() {
        super(Albums.ALBUMS);
    }

    /**
     * Create a detached, initialised AlbumsRecord
     */
    public AlbumsRecord(Long id, String name, String description, LocalDateTime updatedAt, LocalDateTime createdAt, Long ownerId, Long visibilityId) {
        super(Albums.ALBUMS);

        setId(id);
        setName(name);
        setDescription(description);
        setUpdatedAt(updatedAt);
        setCreatedAt(createdAt);
        setOwnerId(ownerId);
        setVisibilityId(visibilityId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AlbumsRecord
     */
    public AlbumsRecord(com.fenrir.core.database.tables.pojos.Albums value) {
        super(Albums.ALBUMS);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setDescription(value.getDescription());
            setUpdatedAt(value.getUpdatedAt());
            setCreatedAt(value.getCreatedAt());
            setOwnerId(value.getOwnerId());
            setVisibilityId(value.getVisibilityId());
            resetChangedOnNotNull();
        }
    }
}
