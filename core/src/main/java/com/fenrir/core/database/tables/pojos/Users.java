/*
 * This file is generated by jOOQ.
 */
package com.fenrir.core.database.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final String code;
    private final String authType;
    private final String externalId;
    private final String externalName;
    private final String name;
    private final String email;
    private final Boolean verified;
    private final Boolean enabled;
    private final LocalDateTime updatedAt;
    private final LocalDateTime createdAt;
    private final Long roleId;

    public Users(Users value) {
        this.id = value.id;
        this.code = value.code;
        this.authType = value.authType;
        this.externalId = value.externalId;
        this.externalName = value.externalName;
        this.name = value.name;
        this.email = value.email;
        this.verified = value.verified;
        this.enabled = value.enabled;
        this.updatedAt = value.updatedAt;
        this.createdAt = value.createdAt;
        this.roleId = value.roleId;
    }

    public Users(
        Long id,
        String code,
        String authType,
        String externalId,
        String externalName,
        String name,
        String email,
        Boolean verified,
        Boolean enabled,
        LocalDateTime updatedAt,
        LocalDateTime createdAt,
        Long roleId
    ) {
        this.id = id;
        this.code = code;
        this.authType = authType;
        this.externalId = externalId;
        this.externalName = externalName;
        this.name = name;
        this.email = email;
        this.verified = verified;
        this.enabled = enabled;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.roleId = roleId;
    }

    /**
     * Getter for <code>public.users.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.users.code</code>.
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Getter for <code>public.users.auth_type</code>.
     */
    public String getAuthType() {
        return this.authType;
    }

    /**
     * Getter for <code>public.users.external_id</code>.
     */
    public String getExternalId() {
        return this.externalId;
    }

    /**
     * Getter for <code>public.users.external_name</code>.
     */
    public String getExternalName() {
        return this.externalName;
    }

    /**
     * Getter for <code>public.users.name</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>public.users.email</code>.
     */
    public String getEmail() {
        return this.email;
    }

    /**
     * Getter for <code>public.users.verified</code>.
     */
    public Boolean getVerified() {
        return this.verified;
    }

    /**
     * Getter for <code>public.users.enabled</code>.
     */
    public Boolean getEnabled() {
        return this.enabled;
    }

    /**
     * Getter for <code>public.users.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Getter for <code>public.users.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for <code>public.users.role_id</code>.
     */
    public Long getRoleId() {
        return this.roleId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Users other = (Users) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        }
        else if (!this.code.equals(other.code))
            return false;
        if (this.authType == null) {
            if (other.authType != null)
                return false;
        }
        else if (!this.authType.equals(other.authType))
            return false;
        if (this.externalId == null) {
            if (other.externalId != null)
                return false;
        }
        else if (!this.externalId.equals(other.externalId))
            return false;
        if (this.externalName == null) {
            if (other.externalName != null)
                return false;
        }
        else if (!this.externalName.equals(other.externalName))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.email == null) {
            if (other.email != null)
                return false;
        }
        else if (!this.email.equals(other.email))
            return false;
        if (this.verified == null) {
            if (other.verified != null)
                return false;
        }
        else if (!this.verified.equals(other.verified))
            return false;
        if (this.enabled == null) {
            if (other.enabled != null)
                return false;
        }
        else if (!this.enabled.equals(other.enabled))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.roleId == null) {
            if (other.roleId != null)
                return false;
        }
        else if (!this.roleId.equals(other.roleId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.authType == null) ? 0 : this.authType.hashCode());
        result = prime * result + ((this.externalId == null) ? 0 : this.externalId.hashCode());
        result = prime * result + ((this.externalName == null) ? 0 : this.externalName.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.email == null) ? 0 : this.email.hashCode());
        result = prime * result + ((this.verified == null) ? 0 : this.verified.hashCode());
        result = prime * result + ((this.enabled == null) ? 0 : this.enabled.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.roleId == null) ? 0 : this.roleId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Users (");

        sb.append(id);
        sb.append(", ").append(code);
        sb.append(", ").append(authType);
        sb.append(", ").append(externalId);
        sb.append(", ").append(externalName);
        sb.append(", ").append(name);
        sb.append(", ").append(email);
        sb.append(", ").append(verified);
        sb.append(", ").append(enabled);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(roleId);

        sb.append(")");
        return sb.toString();
    }
}
