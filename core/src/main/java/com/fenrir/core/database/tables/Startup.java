/*
 * This file is generated by jOOQ.
 */
package com.fenrir.core.database.tables;


import com.fenrir.core.database.Public;
import com.fenrir.core.database.tables.records.StartupRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Startup extends TableImpl<StartupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.startup</code>
     */
    public static final Startup STARTUP = new Startup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StartupRecord> getRecordType() {
        return StartupRecord.class;
    }

    /**
     * The column <code>public.startup.name</code>.
     */
    public final TableField<StartupRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.startup.value</code>.
     */
    public final TableField<StartupRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(100), this, "");

    private Startup(Name alias, Table<StartupRecord> aliased) {
        this(alias, aliased, null);
    }

    private Startup(Name alias, Table<StartupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.startup</code> table reference
     */
    public Startup(String alias) {
        this(DSL.name(alias), STARTUP);
    }

    /**
     * Create an aliased <code>public.startup</code> table reference
     */
    public Startup(Name alias) {
        this(alias, STARTUP);
    }

    /**
     * Create a <code>public.startup</code> table reference
     */
    public Startup() {
        this(DSL.name("startup"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<StartupRecord>> getUniqueKeys() {
        return Arrays.asList(
            Internal.createUniqueKey(Startup.STARTUP, DSL.name("uq_startup_name"), new TableField[] { Startup.STARTUP.NAME }, true)
        );
    }

    @Override
    public Startup as(String alias) {
        return new Startup(DSL.name(alias), this);
    }

    @Override
    public Startup as(Name alias) {
        return new Startup(alias, this);
    }

    @Override
    public Startup as(Table<?> alias) {
        return new Startup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Startup rename(String name) {
        return new Startup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Startup rename(Name name) {
        return new Startup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Startup rename(Table<?> name) {
        return new Startup(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
